// Clearfix - added to floated elements with no height
@mixin clearfix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}

// Absolute position/centering an element
// Remember to set your parent element to position: relative; !
@mixin absoluteCenter {
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
}

// Responsive images reset
@mixin responsiveImages {
	display: block;
	height: auto;
	max-width: 100%;
}

// HTML selector border box reset
@mixin htmlBoxReset {
	box-sizing: border-box;
}

// Universal selector border box reset
@mixin universalBoxReset {
	box-sizing: inherit;
	margin: 0;
	padding: 0;
}

// Body selector default font stylings
@mixin defaultFontStyles {
	font-weight: $fw-reg;
	line-height: $lh-def;
}

// Hide text while making it readable for screen readers 
// Credit for this mixin goes to HugoGiraudel:
// https://github.com/HugoGiraudel/sass-boilerplate/blob/master/stylesheets/base/_helpers.scss
@mixin hideText {
	overflow: hidden;
	padding: 0;
	text-indent: 101%;
	white-space: nowrap;
}

// Hide an element while making it readable for screen readers
// Credit for this mixin goes to HugoGiraudel:
// https://github.com/HugoGiraudel/sass-boilerplate/blob/master/stylesheets/base/_helpers.scss
@mixin hideElement {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px
}

// Simple hide element, quick and dirty
@mixin simpleHide {
	opacity: 0;
	visibility: hidden;
}

// Simple show element, quick and dirty
@mixin simpleShow {
	opacity: 1;
	visibility: visible;
}

// Set character limit for paragraphs
@mixin characterLimit {
	white-space: wrap;
	overflow: hidden;
	text-overflow: ellipsis;
	max-width: 45ch; // By default the character limit will be 45 characters per line

	@include respond(laptop) {
		max-width: 60ch; // On larger screens the limit is increased to 60 characters
	}

	/* These character lengths are based on recommended line length for maximum clarity, readability and proportion in print

    These recommendations are based on a number of factors, such as:
    - How people tend to read.
    - The ease or difficulty in following a line to the end and bringing your eye back to the start of the next line.
    - Quickly understanding the relative importance of various levels of headings between blocks of copy.

    Read more about it here:
    https://typecast.com/blog/a-more-modern-scale-for-web-typography
    */
}

// Horizontally and vertically center your flexbox container
@mixin flexCenter {
	display: flex;
	align-items: center;
	justify-content: center;
}

// More powerful/dynamic flexbox centering mixin
// This mixin means that by default the justified-content and align-items properties will have a value of 'center'.
// But if we indicate another value as an argument, then that value will be applied instead.
// Use like: 
// @include flexPosition; --> use default values of center
// @include flexPosition(space-between) --> use new value for justify-content only
// @include flexPosition(space-between, base-line) --> use new value for both
@mixin flexPosition($justifyContent: center, $alignItems: center) {
	display: flex;
	justify-content: $justifyContent;
	align-items: $alignItems;
}

// Responsive Image Grid
@mixin imageGrid {
	display: grid;
	grid-gap: .75rem;
	grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
}

// Customizeable Responsive Image/Content Block Grid
@mixin responsiveGrid($gap: 0.75rem, $minxmax: (30rem, 1fr)) {
	display: grid;
	grid-gap: $gap;
	grid-template-columns: repeat(auto-fit, minmax($minxmax));
}

// Heading styles (light)
@mixin headingStyleLight {
	font-size: 3.5rem;
	font-weight: 200;
}

// For other mixins, check out these links (Ctrl + Click to open in your default browser):
// https://medium.com/@justinbrazeau/10-useful-sass-mixins-for-automation-833cdee9d69b
// https://engageinteractive.co.uk/blog/top-10-scss-mixins
// https://www.developerdrive.com/10-best-sass-mixins-for-web-developers/
// https://w3bits.com/sass-mixins/





/* MEDIA QUERY MANAGER

$breakpoint argument choices:
- mobile-lg (large mobile)
- tab-port (tablet-portrait)
- tab-land (tablet-landscape)
- laptop (standard laptop screen resolution)
- desktop (standard desktop screen resolution)
- desktop-lg (1440p resolution desktop)
- desktop-4k (4k resolution desktop)

** MIN-WIDTH SETTINGS **
- mobile-lg == min-width 550px
- tab-port == min-width 750px
- tab-land == min-width 1000px
- laptop == min-width 1300px
- laptop-lg == min-width 1600px
- desktop == min-width 1900px 118.75
- desktop-lg == min-width 2500px 156.25
- desktop-4k == min-width 3800px 237.5

1em = 16px (16px is the default browser font-size)
Each em amount is the min-width listed above divided 16
For example, for tab-port, 768px / 16px = 48em
*/

@mixin respond($breakpoint) {

	@if $breakpoint==mobile-lg {
		@media only screen and (min-width: 34.375em) {
			@content;
		}
	}

	@if $breakpoint==tab-port {
		@media only screen and (min-width: 46.875em) {
			@content;
		}
	}

	@if $breakpoint==tab-land {
		@media only screen and (min-width: 62.5em) {
			@content;
		}
	}

	@if $breakpoint==laptop {
		@media only screen and (min-width: 81.25em) {
			@content;
		}
	}

	@if $breakpoint==laptop-lg {
		@media only screen and (min-width: 100em) {
			@content;
		}
	}

	@if $breakpoint==desktop {
		@media only screen and (min-width: 118.75em) {
			@content;
		}
	}

	@if $breakpoint==desktop-lg {
		@media only screen and (min-width: 156.25em) {
			@content;
		}
	}

	@if $breakpoint==desktop-4k {
		@media only screen and (min-width: 237.5em) {
			@content;
		}
	}
}